/*
* generated by Xtext
*/
package co.edu.uniandes.miso4202.ehicletax.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VtdslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreIDTerminalRuleCall_1_0 = (RuleCall)cNombreAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjetosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjetosObjetoParserRuleCall_3_0 = (RuleCall)cObjetosAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Model:
		//	{Model} nombre=ID "{" objetos+=Objeto* "}";
		public ParserRule getRule() { return rule; }

		//{Model} nombre=ID "{" objetos+=Objeto* "}"
		public Group getGroup() { return cGroup; }

		//{Model}
		public Action getModelAction_0() { return cModelAction_0; }

		//nombre=ID
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0() { return cNombreIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//objetos+=Objeto*
		public Assignment getObjetosAssignment_3() { return cObjetosAssignment_3; }

		//Objeto
		public RuleCall getObjetosObjetoParserRuleCall_3_0() { return cObjetosObjetoParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ObjetoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Objeto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDescripcionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescripcionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescripcionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAtributosAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAtributosAtributoParserRuleCall_3_0 = (RuleCall)cAtributosAssignment_3.eContents().get(0);
		private final Assignment cObjetosAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cObjetosObjetoParserRuleCall_4_0 = (RuleCall)cObjetosAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Objeto:
		//	name=ID descripcion=STRING? "{" atributos+=Atributo* objetos+=Objeto* "}";
		public ParserRule getRule() { return rule; }

		//name=ID descripcion=STRING? "{" atributos+=Atributo* objetos+=Objeto* "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//descripcion=STRING?
		public Assignment getDescripcionAssignment_1() { return cDescripcionAssignment_1; }

		//STRING
		public RuleCall getDescripcionSTRINGTerminalRuleCall_1_0() { return cDescripcionSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//atributos+=Atributo*
		public Assignment getAtributosAssignment_3() { return cAtributosAssignment_3; }

		//Atributo
		public RuleCall getAtributosAtributoParserRuleCall_3_0() { return cAtributosAtributoParserRuleCall_3_0; }

		//objetos+=Objeto*
		public Assignment getObjetosAssignment_4() { return cObjetosAssignment_4; }

		//Objeto
		public RuleCall getObjetosObjetoParserRuleCall_4_0() { return cObjetosObjetoParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class AtributoSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtributoSimple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtributoSimpleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNombreAlternatives_1_0 = (Alternatives)cNombreAssignment_1.eContents().get(0);
		private final RuleCall cNombreIDTerminalRuleCall_1_0_0 = (RuleCall)cNombreAlternatives_1_0.eContents().get(0);
		private final RuleCall cNombreSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNombreAlternatives_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTipoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTipoDATATYPETerminalRuleCall_3_0 = (RuleCall)cTipoAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//AtributoSimple:
		//	{AtributoSimple} nombre=(ID | STRING) ":" tipo=DATATYPE ";";
		public ParserRule getRule() { return rule; }

		//{AtributoSimple} nombre=(ID | STRING) ":" tipo=DATATYPE ";"
		public Group getGroup() { return cGroup; }

		//{AtributoSimple}
		public Action getAtributoSimpleAction_0() { return cAtributoSimpleAction_0; }

		//nombre=(ID | STRING)
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID | STRING
		public Alternatives getNombreAlternatives_1_0() { return cNombreAlternatives_1_0; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0_0() { return cNombreIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNombreSTRINGTerminalRuleCall_1_0_1() { return cNombreSTRINGTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//tipo=DATATYPE
		public Assignment getTipoAssignment_3() { return cTipoAssignment_3; }

		//DATATYPE
		public RuleCall getTipoDATATYPETerminalRuleCall_3_0() { return cTipoDATATYPETerminalRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class AtributoInicializadoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtributoInicializado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtributoInicializadoAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNombreAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNombreAlternatives_1_0 = (Alternatives)cNombreAssignment_1.eContents().get(0);
		private final RuleCall cNombreIDTerminalRuleCall_1_0_0 = (RuleCall)cNombreAlternatives_1_0.eContents().get(0);
		private final RuleCall cNombreSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNombreAlternatives_1_0.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTipoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTipoDATATYPETerminalRuleCall_3_0 = (RuleCall)cTipoAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValorValorCompletoParserRuleCall_5_0 = (RuleCall)cValorAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AtributoInicializado:
		//	{AtributoInicializado} nombre=(ID | STRING) ":" tipo=DATATYPE "=" valor=ValorCompleto ";";
		public ParserRule getRule() { return rule; }

		//{AtributoInicializado} nombre=(ID | STRING) ":" tipo=DATATYPE "=" valor=ValorCompleto ";"
		public Group getGroup() { return cGroup; }

		//{AtributoInicializado}
		public Action getAtributoInicializadoAction_0() { return cAtributoInicializadoAction_0; }

		//nombre=(ID | STRING)
		public Assignment getNombreAssignment_1() { return cNombreAssignment_1; }

		//ID | STRING
		public Alternatives getNombreAlternatives_1_0() { return cNombreAlternatives_1_0; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_1_0_0() { return cNombreIDTerminalRuleCall_1_0_0; }

		//STRING
		public RuleCall getNombreSTRINGTerminalRuleCall_1_0_1() { return cNombreSTRINGTerminalRuleCall_1_0_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//tipo=DATATYPE
		public Assignment getTipoAssignment_3() { return cTipoAssignment_3; }

		//DATATYPE
		public RuleCall getTipoDATATYPETerminalRuleCall_3_0() { return cTipoDATATYPETerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//valor=ValorCompleto
		public Assignment getValorAssignment_5() { return cValorAssignment_5; }

		//ValorCompleto
		public RuleCall getValorValorCompletoParserRuleCall_5_0() { return cValorValorCompletoParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class AtributoAsignadoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtributoAsignado");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreIDTerminalRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValorStatementParserRuleCall_2_0 = (RuleCall)cValorAssignment_2.eContents().get(0);
		
		//AtributoAsignado:
		//	nombre=ID "=" valor+=Statement*;
		public ParserRule getRule() { return rule; }

		//nombre=ID "=" valor+=Statement*
		public Group getGroup() { return cGroup; }

		//nombre=ID
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_0_0() { return cNombreIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//valor+=Statement*
		public Assignment getValorAssignment_2() { return cValorAssignment_2; }

		//Statement
		public RuleCall getValorStatementParserRuleCall_2_0() { return cValorStatementParserRuleCall_2_0; }
	}

	public class AtributoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atributo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtributoSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAtributoInicializadoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAtributoAsignadoParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Atributo:
		//	AtributoSimple | AtributoInicializado | AtributoAsignado;
		public ParserRule getRule() { return rule; }

		//AtributoSimple | AtributoInicializado | AtributoAsignado
		public Alternatives getAlternatives() { return cAlternatives; }

		//AtributoSimple
		public RuleCall getAtributoSimpleParserRuleCall_0() { return cAtributoSimpleParserRuleCall_0; }

		//AtributoInicializado
		public RuleCall getAtributoInicializadoParserRuleCall_1() { return cAtributoInicializadoParserRuleCall_1; }

		//AtributoAsignado
		public RuleCall getAtributoAsignadoParserRuleCall_2() { return cAtributoAsignadoParserRuleCall_2; }
	}

	public class ValorAtributoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorAtributo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValorAtributoAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cNUMBERTerminalRuleCall_1_2 = (RuleCall)cAlternatives_1.eContents().get(2);
		
		//ValorAtributo:
		//	{ValorAtributo} (ID | STRING | NUMBER);
		public ParserRule getRule() { return rule; }

		//{ValorAtributo} (ID | STRING | NUMBER)
		public Group getGroup() { return cGroup; }

		//{ValorAtributo}
		public Action getValorAtributoAction_0() { return cValorAtributoAction_0; }

		//ID | STRING | NUMBER
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }

		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_2() { return cNUMBERTerminalRuleCall_1_2; }
	}

	public class ValorCompletoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorCompleto");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValorAtributoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ValorCompleto:
		//	ValorAtributo | Lista;
		public ParserRule getRule() { return rule; }

		//ValorAtributo | Lista
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValorAtributo
		public RuleCall getValorAtributoParserRuleCall_0() { return cValorAtributoParserRuleCall_0; }

		//Lista
		public RuleCall getListaParserRuleCall_1() { return cListaParserRuleCall_1; }
	}

	public class ContenidoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Contenido");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAtributoParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cObjetoParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Contenido:
		//	Atributo | Objeto;
		public ParserRule getRule() { return rule; }

		//Atributo | Objeto
		public Alternatives getAlternatives() { return cAlternatives; }

		//Atributo
		public RuleCall getAtributoParserRuleCall_0() { return cAtributoParserRuleCall_0; }

		//Objeto
		public RuleCall getObjetoParserRuleCall_1() { return cObjetoParserRuleCall_1; }
	}

	public class ListaIntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListaInteger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListaIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValoresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValoresNUMBERTerminalRuleCall_2_0 = (RuleCall)cValoresAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValoresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValoresNUMBERTerminalRuleCall_3_1_0 = (RuleCall)cValoresAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListaInteger:
		//	{ListaInteger} "{" valores+=NUMBER ("," valores+=NUMBER)* "}";
		public ParserRule getRule() { return rule; }

		//{ListaInteger} "{" valores+=NUMBER ("," valores+=NUMBER)* "}"
		public Group getGroup() { return cGroup; }

		//{ListaInteger}
		public Action getListaIntegerAction_0() { return cListaIntegerAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//valores+=NUMBER
		public Assignment getValoresAssignment_2() { return cValoresAssignment_2; }

		//NUMBER
		public RuleCall getValoresNUMBERTerminalRuleCall_2_0() { return cValoresNUMBERTerminalRuleCall_2_0; }

		//("," valores+=NUMBER)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//valores+=NUMBER
		public Assignment getValoresAssignment_3_1() { return cValoresAssignment_3_1; }

		//NUMBER
		public RuleCall getValoresNUMBERTerminalRuleCall_3_1_0() { return cValoresNUMBERTerminalRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ListaStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListaString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListaStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValoresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValoresSTRINGTerminalRuleCall_2_0 = (RuleCall)cValoresAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValoresAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValoresSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValoresAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ListaString:
		//	{ListaString} "{" valores+=STRING ("," valores+=STRING)* "}";
		public ParserRule getRule() { return rule; }

		//{ListaString} "{" valores+=STRING ("," valores+=STRING)* "}"
		public Group getGroup() { return cGroup; }

		//{ListaString}
		public Action getListaStringAction_0() { return cListaStringAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//valores+=STRING
		public Assignment getValoresAssignment_2() { return cValoresAssignment_2; }

		//STRING
		public RuleCall getValoresSTRINGTerminalRuleCall_2_0() { return cValoresSTRINGTerminalRuleCall_2_0; }

		//("," valores+=STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//valores+=STRING
		public Assignment getValoresAssignment_3_1() { return cValoresAssignment_3_1; }

		//STRING
		public RuleCall getValoresSTRINGTerminalRuleCall_3_1_0() { return cValoresSTRINGTerminalRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ListaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lista");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListaIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cListaStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Lista:
		//	ListaInteger | ListaString;
		public ParserRule getRule() { return rule; }

		//ListaInteger | ListaString
		public Alternatives getAlternatives() { return cAlternatives; }

		//ListaInteger
		public RuleCall getListaIntegerParserRuleCall_0() { return cListaIntegerParserRuleCall_0; }

		//ListaString
		public RuleCall getListaStringParserRuleCall_1() { return cListaStringParserRuleCall_1; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		
		/// * ##################### Gramatica de expresiones ##################### * / Module:
		//	"module" name=ID statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//"module" name=ID statements+=Statement*
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEvaluationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	Definition | Evaluation;
		public ParserRule getRule() { return rule; }

		//Definition | Evaluation
		public Alternatives getAlternatives() { return cAlternatives; }

		//Definition
		public RuleCall getDefinitionParserRuleCall_0() { return cDefinitionParserRuleCall_0; }

		//Evaluation
		public RuleCall getEvaluationParserRuleCall_1() { return cEvaluationParserRuleCall_1; }
	}

	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Definition:
		//	"def" name=ID;
		public ParserRule getRule() { return rule; }

		//"def" name=ID
		public Group getGroup() { return cGroup; }

		//"def"
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Evaluation:
		//	expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Addition;
		public ParserRule getRule() { return rule; }

		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_1_0() { return cRightMultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//Multiplication returns Expression:
		//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
		public ParserRule getRule() { return rule; }

		//PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//(({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current} "*" | {Div.left=current} "/"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Multi.left=current} "*"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0_0_0() { return cMultiLeftAction_1_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }

		//{Div.left=current} "/"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Div.left=current}
		public Action getDivLeftAction_1_0_1_0() { return cDivLeftAction_1_0_1_0; }

		//"/"
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNUMBERTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSTRINGAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cIDAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//	"(" Expression ")" | {NumberLiteral} value=NUMBER | / *{DefinitionLiteral} def=[Definition] |* / {STRING} STRING | {ID}
		//	ID;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {NumberLiteral} value=NUMBER | / *{DefinitionLiteral} def=[Definition] |* / {STRING} STRING | {ID} ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{NumberLiteral} value=NUMBER
		public Group getGroup_1() { return cGroup_1; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }

		//value=NUMBER
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//NUMBER
		public RuleCall getValueNUMBERTerminalRuleCall_1_1_0() { return cValueNUMBERTerminalRuleCall_1_1_0; }

		/// *{DefinitionLiteral} def=[Definition] |* / {STRING} STRING
		public Group getGroup_2() { return cGroup_2; }

		/// *{DefinitionLiteral} def=[Definition] |* / {STRING}
		public Action getSTRINGAction_2_0() { return cSTRINGAction_2_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_1() { return cSTRINGTerminalRuleCall_2_1; }

		//{ID} ID
		public Group getGroup_3() { return cGroup_3; }

		//{ID}
		public Action getIDAction_3_0() { return cIDAction_3_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_3_1() { return cIDTerminalRuleCall_3_1; }
	}
	
	
	private ModelElements pModel;
	private ObjetoElements pObjeto;
	private AtributoSimpleElements pAtributoSimple;
	private AtributoInicializadoElements pAtributoInicializado;
	private AtributoAsignadoElements pAtributoAsignado;
	private AtributoElements pAtributo;
	private ValorAtributoElements pValorAtributo;
	private ValorCompletoElements pValorCompleto;
	private ContenidoElements pContenido;
	private ListaIntegerElements pListaInteger;
	private ListaStringElements pListaString;
	private ListaElements pLista;
	private ModuleElements pModule;
	private StatementElements pStatement;
	private DefinitionElements pDefinition;
	private EvaluationElements pEvaluation;
	private ExpressionElements pExpression;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PrimaryExpressionElements pPrimaryExpression;
	private TerminalRule tNUMBER;
	private TerminalRule tINT;
	private TerminalRule tDATATYPE;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public VtdslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("co.edu.uniandes.miso4202.ehicletax.Vtdsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	{Model} nombre=ID "{" objetos+=Objeto* "}";
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Objeto:
	//	name=ID descripcion=STRING? "{" atributos+=Atributo* objetos+=Objeto* "}";
	public ObjetoElements getObjetoAccess() {
		return (pObjeto != null) ? pObjeto : (pObjeto = new ObjetoElements());
	}
	
	public ParserRule getObjetoRule() {
		return getObjetoAccess().getRule();
	}

	//AtributoSimple:
	//	{AtributoSimple} nombre=(ID | STRING) ":" tipo=DATATYPE ";";
	public AtributoSimpleElements getAtributoSimpleAccess() {
		return (pAtributoSimple != null) ? pAtributoSimple : (pAtributoSimple = new AtributoSimpleElements());
	}
	
	public ParserRule getAtributoSimpleRule() {
		return getAtributoSimpleAccess().getRule();
	}

	//AtributoInicializado:
	//	{AtributoInicializado} nombre=(ID | STRING) ":" tipo=DATATYPE "=" valor=ValorCompleto ";";
	public AtributoInicializadoElements getAtributoInicializadoAccess() {
		return (pAtributoInicializado != null) ? pAtributoInicializado : (pAtributoInicializado = new AtributoInicializadoElements());
	}
	
	public ParserRule getAtributoInicializadoRule() {
		return getAtributoInicializadoAccess().getRule();
	}

	//AtributoAsignado:
	//	nombre=ID "=" valor+=Statement*;
	public AtributoAsignadoElements getAtributoAsignadoAccess() {
		return (pAtributoAsignado != null) ? pAtributoAsignado : (pAtributoAsignado = new AtributoAsignadoElements());
	}
	
	public ParserRule getAtributoAsignadoRule() {
		return getAtributoAsignadoAccess().getRule();
	}

	//Atributo:
	//	AtributoSimple | AtributoInicializado | AtributoAsignado;
	public AtributoElements getAtributoAccess() {
		return (pAtributo != null) ? pAtributo : (pAtributo = new AtributoElements());
	}
	
	public ParserRule getAtributoRule() {
		return getAtributoAccess().getRule();
	}

	//ValorAtributo:
	//	{ValorAtributo} (ID | STRING | NUMBER);
	public ValorAtributoElements getValorAtributoAccess() {
		return (pValorAtributo != null) ? pValorAtributo : (pValorAtributo = new ValorAtributoElements());
	}
	
	public ParserRule getValorAtributoRule() {
		return getValorAtributoAccess().getRule();
	}

	//ValorCompleto:
	//	ValorAtributo | Lista;
	public ValorCompletoElements getValorCompletoAccess() {
		return (pValorCompleto != null) ? pValorCompleto : (pValorCompleto = new ValorCompletoElements());
	}
	
	public ParserRule getValorCompletoRule() {
		return getValorCompletoAccess().getRule();
	}

	//Contenido:
	//	Atributo | Objeto;
	public ContenidoElements getContenidoAccess() {
		return (pContenido != null) ? pContenido : (pContenido = new ContenidoElements());
	}
	
	public ParserRule getContenidoRule() {
		return getContenidoAccess().getRule();
	}

	//ListaInteger:
	//	{ListaInteger} "{" valores+=NUMBER ("," valores+=NUMBER)* "}";
	public ListaIntegerElements getListaIntegerAccess() {
		return (pListaInteger != null) ? pListaInteger : (pListaInteger = new ListaIntegerElements());
	}
	
	public ParserRule getListaIntegerRule() {
		return getListaIntegerAccess().getRule();
	}

	//ListaString:
	//	{ListaString} "{" valores+=STRING ("," valores+=STRING)* "}";
	public ListaStringElements getListaStringAccess() {
		return (pListaString != null) ? pListaString : (pListaString = new ListaStringElements());
	}
	
	public ParserRule getListaStringRule() {
		return getListaStringAccess().getRule();
	}

	//Lista:
	//	ListaInteger | ListaString;
	public ListaElements getListaAccess() {
		return (pLista != null) ? pLista : (pLista = new ListaElements());
	}
	
	public ParserRule getListaRule() {
		return getListaAccess().getRule();
	}

	/// * ##################### Gramatica de expresiones ##################### * / Module:
	//	"module" name=ID statements+=Statement*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Statement:
	//	Definition | Evaluation;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Definition:
	//	"def" name=ID;
	public DefinitionElements getDefinitionAccess() {
		return (pDefinition != null) ? pDefinition : (pDefinition = new DefinitionElements());
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}

	//Evaluation:
	//	expression=Expression ";";
	public EvaluationElements getEvaluationAccess() {
		return (pEvaluation != null) ? pEvaluation : (pEvaluation = new EvaluationElements());
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//Expression:
	//	Addition;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication (({Plus.left=current} "+" | {Minus.left=current} "-") right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	PrimaryExpression (({Multi.left=current} "*" | {Div.left=current} "/") right=PrimaryExpression)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PrimaryExpression returns Expression:
	//	"(" Expression ")" | {NumberLiteral} value=NUMBER | / *{DefinitionLiteral} def=[Definition] |* / {STRING} STRING | {ID}
	//	ID;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return (pPrimaryExpression != null) ? pPrimaryExpression : (pPrimaryExpression = new PrimaryExpressionElements());
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//terminal NUMBER returns ecore::EBigDecimal:
	//	"0".."9"* ("." "0".."9"+)?;
	public TerminalRule getNUMBERRule() {
		return (tNUMBER != null) ? tNUMBER : (tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER"));
	} 

	//terminal INT returns ecore::EInt:
	//	"this one has been deactivated";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal DATATYPE:
	//	"Real" | "Int" | "String" | "List of Integer" | "List of String";
	public TerminalRule getDATATYPERule() {
		return (tDATATYPE != null) ? tDATATYPE : (tDATATYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATATYPE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
